{"version":3,"sources":["Components/CardDetailsRow.js","Components/CardsDetailsList.js","Components/Label.js","Components/CardForm.js","App.js","serviceWorker.js","index.js"],"names":["CardDetailsRow","cardDetails","this","props","card","cardName","name","cardNumber","balance","limit","React","Component","CardsDetailsList","refreshList","console","log","cards","cardsList","cardRows","forEach","cardInfo","push","key","Label","CardForm","handleNumberChange","evt","setState","target","value","handleLimitChange","handleNameChange","handleSubmit","preventDefault","isReadyToSubmit","state","addCard","bind","length","isSubmitEnabled","id","type","placeholder","onChange","disabled","onClick","Title","App","existingCardsList","axios","post","JSON","stringify","headers","then","response","status","refreshExistingCardsList","catch","error","get","data","updateCardsList","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+QAEqBA,G,6KAEjB,IAAMC,EAAcC,KAAKC,MAAMC,KACzBC,EAASJ,EAAYK,KACrBC,EAAWN,EAAYM,WACvBC,EAAQP,EAAYO,QACpBC,EAAQR,EAAYQ,MAE1B,OACE,4BACE,4BAAKJ,GACL,4BAAKE,GACL,4BAAKC,GACL,4BAAKC,Q,GAb+BC,IAAMC,YCC7BC,E,kLAGnBV,KAAKC,MAAMU,gB,+BAGbC,QAAQC,IAAIb,KAAKC,OACjB,IAAMa,EAAQd,KAAKC,MAAMc,UACzBH,QAAQC,IAAIC,GACR,IAAME,EAAS,GAMf,OALDF,EAAMG,SAAQ,SAACC,GACXF,EAASG,KAAK,kBAAC,EAAD,CAAgBC,IAAKF,EAASb,WAAYH,KAAMgB,QAK/D,+BACE,+BACE,4BACE,qCACA,4CACA,yCACA,yCAGJ,+BAAQF,Q,GAzB8BR,IAAMC,W,OCDrC,SAASY,EAAMpB,GAC5B,OAAO,+BAAQA,EAAMG,M,ICCFkB,E,kDACnB,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAWTsB,mBAAqB,SAAAC,GACrB,EAAKC,SAAS,CAACpB,WAAWmB,EAAIE,OAAOC,SAbjB,EAgBpBC,kBAAqB,SAAAJ,GACrB,EAAKC,SAAS,CAAClB,MAAMiB,EAAIE,OAAOC,SAjBZ,EAoBpBE,iBAAoB,SAAAL,GACpB,EAAKC,SAAS,CAACtB,SAASqB,EAAIE,OAAOC,SArBf,EA6BrBG,aAAe,SAAAN,GAEX,GADAA,EAAIO,iBACC,EAAKC,kBAAV,CAFkB,MAMc,EAAKC,MAAhC9B,EANa,EAMbA,SAASE,EANI,EAMJA,WAAWE,EANP,EAMOA,MACpBL,EAAM,GACZA,EAAI,KAASC,EACbD,EAAI,WAAeG,EACnBH,EAAI,MAAUK,EAEd,EAAKkB,SAAS,CAACtB,SAAS,KACxB,EAAKsB,SAAS,CAACpB,WAAW,KAC1B,EAAKoB,SAAS,CAAClB,MAAM,KACrB,EAAKN,MAAMiC,QAAQhC,KA1ClB,EAAK4B,aAAa,EAAKA,aAAaK,KAAlB,gBAEjB,EAAKF,MAAO,CACX9B,SAAU,GACVE,WAAY,GACZE,MAAM,IAPS,E,8DAwBF,IAAD,EACiBP,KAAKiC,MAAhC9B,EADU,EACVA,SAASE,EADC,EACDA,WAAWE,EADV,EACUA,MACtB,OAAOJ,EAASiC,OAAO,GAAK/B,EAAW+B,OAAO,IAAI7B,EAAM6B,OAAO,I,+BAyBnE,IAAMC,EAAkBrC,KAAKgC,kBAE3B,OACF,6BACE,0BAAMM,GAAG,eACP,kBAACjB,EAAD,CAAOjB,KAAK,SADd,IACwB,6BACtB,2BAAOmC,KAAK,OAAOC,YAAY,aAAaF,GAAG,WAAWX,MAAO3B,KAAKiC,MAAM9B,SAAUsC,SAAUzC,KAAK6B,mBAAmB,6BAC1H,kBAACR,EAAD,CAAOjB,KAAK,gBAAgB,6BAC5B,2BAAOmC,KAAK,SAASC,YAAY,oBAAoBF,GAAG,aAAaX,MAAO3B,KAAKiC,MAAM5B,WAAYoC,SAAUzC,KAAKuB,qBAAqB,6BAErI,kBAACF,EAAD,CAAOjB,KAAK,UAAU,6BAEzB,2BAAOmC,KAAK,SAASC,YAAY,cAAcb,MAAO3B,KAAKiC,MAAM1B,MAAOkC,SAAUzC,KAAK4B,oBAAoB,6BAAK,6BAE7G,4BAAQc,UAAWL,EAAiBM,QAAS3C,KAAK8B,cAAlD,c,GAlEgCtB,IAAMC,W,gBC+D5C,SAASmC,IACP,OAAO,kDA2DMC,M,kDAxHf,WAAY5C,GAAQ,IAAD,8BACf,cAAMA,IACLgC,MAAQ,CACXa,kBAAkB,IAHD,E,oDAOT5C,GAAM,IAAD,OACX6C,IAAMC,KAAK,gBAAgBC,KAAKC,UAAUhD,GAAM,CAACiD,QAAS,CAAE,eAAgB,sBAC3EC,MAAM,SAAAC,GACgB,MAAlBA,EAASC,QACV,EAAKC,8BAGNC,OAAM,SAAAC,GACL7C,QAAQC,IAAI4C,Q,iDAMW,IAAD,OAChBV,IAAMW,IAAI,mBAAmB,CAACP,QAAS,CAAE,eAAgB,sBACxDC,MACC,SAAAC,GACyB,MAAlBA,EAASC,QAAgBD,EAASM,KAAKvB,OAAO,GAC/C,EAAKwB,gBAAgBP,EAASM,MAE9B/C,QAAQC,IAAIwC,MAGnBG,OAAM,SAAAC,GACL7C,QAAQC,IAAI4C,Q,sCAIV1C,GACdH,QAAQC,IAAI,iBACZD,QAAQC,IAAIb,KAAKiC,MAAMa,mBACvB9C,KAAKyB,SAAS,CAACqB,kBAAkB/B,IACjCH,QAAQC,IAAIb,KAAKiC,MAAMa,qB,+BAIzB,OACE,yBAAKe,UAAU,OAEZ,6BACI,kBAACjB,EAAD,MAED,kBAAC,EAAD,CAAUV,QAASlC,KAAKkC,QAAQC,KAAKnC,QACnC,6BACA,kBAAC,EAAD,CAAkBW,YAAaX,KAAKuD,yBAAyBpB,KAAKnC,MAAOe,UAAWf,KAAKiC,MAAMa,2B,GArDxFtC,IAAMC,WCMLqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMoB,c","file":"static/js/main.1475d9ca.chunk.js","sourcesContent":["\nimport React from 'react';\nexport default class CardDetailsRow extends React.Component{\n  render(){\n    const cardDetails = this.props.card;\n    const cardName=cardDetails.name;\n    const cardNumber=cardDetails.cardNumber;\n    const balance=cardDetails.balance;\n    const limit = cardDetails.limit;\n\n    return(\n      <tr>\n        <td>{cardName}</td>\n        <td>{cardNumber}</td>\n        <td>{balance}</td>\n        <td>{limit}</td>\n        </tr>\n    );\n  }\n}\n","\nimport React from 'react';\nimport CardDetailsRow from './CardDetailsRow'\nexport default class CardsDetailsList extends React.Component{\n\ncomponentDidMount(){\n  this.props.refreshList();\n}\n  render(){\nconsole.log(this.props);\nconst cards = this.props.cardsList;\nconsole.log(cards);\n    const cardRows=[];\n   cards.forEach((cardInfo)=>{\n       cardRows.push(<CardDetailsRow key={cardInfo.cardNumber} card={cardInfo}/>);\n    });\n\n\n    return(\n      <table>\n        <thead>\n          <tr>\n            <th>Name </th>\n            <th>Card Number </th>\n            <th> Balance </th>\n            <th> Limit </th>\n            </tr>\n        </thead>\n        <tbody>{cardRows}</tbody>\n        </table>\n\n    );\n  }\n\n}\n","import React from 'react';\n\nexport default function Label(props) {\n  return <label>{props.name}</label>;\n}\n","import React from 'react';\nimport Label from './Label';\n\n\nexport default class CardForm extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleSubmit=this.handleSubmit.bind(this);\n\n     this.state= {\n      cardName: \"\",\n      cardNumber: \"\",\n      limit:\"\"\n    };\n\n  }\n\n\thandleNumberChange = evt => {\n\tthis.setState({cardNumber:evt.target.value});\n\t}\n\n\thandleLimitChange  = evt => {\n\tthis.setState({limit:evt.target.value});\n\t}\n\n\thandleNameChange  = evt => {\n\tthis.setState({cardName:evt.target.value});\n\t}\n\n\tisReadyToSubmit(){\n\t\tconst{cardName,cardNumber,limit}=this.state;\n      return cardName.length>0 && cardNumber.length<20&&limit.length>0;\n  }\n\nhandleSubmit = evt => {\n    evt.preventDefault();\n    if (!this.isReadyToSubmit()) {\n\n      return;\n    }\n   const{cardName,cardNumber,limit}=this.state;\n   const card ={};\n   card[\"name\"]=cardName;\n   card[\"cardNumber\"]=cardNumber;\n   card[\"limit\"]=limit;\n\n   this.setState({cardName:\"\"});\n   this.setState({cardNumber:\"\"});\n   this.setState({limit:\"\"});\n   this.props.addCard(card);\n\n  };\n\n\n  render () {\n\n\t const isSubmitEnabled = this.isReadyToSubmit();\n\n    return (\n  <div>\n    <form id=\"AddCardForm\" >\n      <Label name=\"Name\" /> <br/>\n      <input type=\"text\" placeholder=\"Enter Name\" id=\"cardName\" value={this.state.cardName} onChange={this.handleNameChange}/><br/>\n\t\t  <Label name=\"Card Number\" /><br/>\n    <input type=\"number\" placeholder=\"Enter Card number\" id=\"cardNumber\" value={this.state.cardNumber} onChange={this.handleNumberChange}/><br/>\n\n      <Label name=\"Limit\" /><br/>\n\n\t\t <input type=\"number\" placeholder=\"Enter Limit\" value={this.state.limit} onChange={this.handleLimitChange}/><br/><br/>\n\n      <button disabled={!isSubmitEnabled} onClick={this.handleSubmit}>Add </button>\n   </form>\n  </div>\n\n  );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport CardsDetailsList from './Components/CardsDetailsList';\nimport CardForm from './Components/CardForm';\nimport axios from 'axios';\n\nclass  App extends React.Component {\nconstructor(props) {\n    super(props);\nthis.state = {\n  existingCardsList:[],\n};\n}\n\n  addCard(card){\n    axios.post('/api/card/Add',JSON.stringify(card),{headers: { 'Content-Type': 'application/json' }})\n    .then (response => {\n      if(response.status===201){\n        this.refreshExistingCardsList();\n      }\n    })\n      .catch(error =>{\n        console.log(error);\n      });\n\n    }\n\n\n    refreshExistingCardsList(){\n              axios.get('/api/card/GetAll',{headers: { 'Content-Type': 'application/json'}})\n              .then(\n                response => {\n                    if(response.status===200 && response.data.length>0){\n                      this.updateCardsList(response.data);\n                    }\n                      console.log(response);\n                }\n              )\n              .catch(error => {\n                console.log(error);\n              });\n            }\n\n  updateCardsList(cardsList){\n    console.log(\"before update\");\n    console.log(this.state.existingCardsList);\n    this.setState({existingCardsList:cardsList});\n    console.log(this.state.existingCardsList);\n  }\n\nrender(){\n  return (\n    <div className=\"App\">\n\n       <div>\n           <Title/>\n\n          <CardForm addCard={this.addCard.bind(this)}/>\n            <div>\n            <CardsDetailsList refreshList={this.refreshExistingCardsList.bind(this)} cardsList={this.state.existingCardsList}/>\n            </div>\n          </div>\n    </div>\n  );\n}\n}\n\nfunction Title() {\n  return <h1>Credit Card System</h1>;\n}\n\n\n\n\n\n\n/**\n\nclass CardsDetailsTable extends React.Component{\n  render(){\n\nconst cards = this.props.cardsList;\n    const cardRows=[];\n   cards.forEach((cardInfo)=>{\n       cardRows.push(<CardDetailsRow key={cardInfo.cardNumber} card={cardInfo}/>);\n    });\n\n\n    return(\n      <table>\n        <thead>\n          <tr>\n            <th>Name </th>\n            <th>Card Number </th>\n            <th> Balance </th>\n            <th> Limit </th>\n            </tr>\n        </thead>\n        <tbody>{cardRows}</tbody>\n        </table>\n\n    );\n  }\n\n}\n*\n\nclass APIService extends React.Component {\n\n\nonADD(card) {\n\t\tconst response =  axios.post(\n          'http://localhost:8080/api/card/Add',\n          {data: JSON.stringify(card)},\n          { headers: { 'Content-Type': 'application/json' } }\n        )\n    //  if(response.code)\n        console.log(response.data)\n        const cards = [\n          {name: 'Sporting Goods',cardNumber:'3534534', balance: '$49.99', limit:'221'},\n            {name: 'new1 1',cardNumber:'353453', balance: '$4.99', limit:'2213'},\n            {name: 'Sporting 2',cardNumber:'35345342323121', balance: '$9.99', limit:'21'},\n            {name: 'Sporting 3',cardNumber:'353453412', balance: '$491.99', limit:'551'}\n        ];\n}\n}\n**/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}